<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WaveEquation on Tintingo | 丁毅</title>
    <link>http://localhost:4321/categories/waveequation/</link>
    <description>Recent content in WaveEquation on Tintingo | 丁毅</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Feb 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:4321/categories/waveequation/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>有限差分方法近似函数导数</title>
      <link>http://localhost:4321/blogs/fdm-waveequation-derivative/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:4321/blogs/fdm-waveequation-derivative/</guid>
      <description>
        <![CDATA[
        <p>有限差分法是求解偏微分方程的主要数值方法之一，其基本思想是用离散的只含有有限个未知量的差分方程组去近似代替连续变量的微分方程和定解条件，并把差分方程组的解作为微分方程定解问题的近似解。
用差分法将连续问题离散化的主要步骤如下：</p>
<ol>
<li>对求解区域作网格剖分，用有限的网格节点代替连续区域。</li>
<li>构造差分格式，即通过适当的方法将微分方程离散化，导出线性方程组。</li>
<li>对离散点上的近似值进行插值逼近，得到整个区域上的近似解。</li>
</ol>
<p>有限差分法把控制方程中的导数用网格节点上的函数值的差商代替以进行离散，从而建立以网格节点上的值为未知数的代数方程组。</p>
<h2 id="一阶导数的有限差分近似">一阶导数的有限差分近似</h2>
<h3 id="三种一阶导数的差商形式">三种一阶导数的差商形式</h3>
<p>需要说明的是，利用有限差分离散偏微分方程的方法是多种多样的，即使对同一个方程也可以构造不同的差分格式。首先，使用网格节点上函数值的差商代替导数时，就可以分为前向差商、中心差商、后向差商等方法。</p>
<p>\begin{equation}
\label{eq:21}
\nonumber
\frac{df}{dx}^{forward} \approx \frac{f(x+dx) - (x)}{dx}
\end{equation}</p>
<p>\begin{equation}
\label{eq:22}
\nonumber
\frac{df}{dx}^{center} \approx \frac{f(x+dx) - (x-dx)}{2dx}
\end{equation}</p>
<p>\begin{equation}
\label{eq:23}
\nonumber
\frac{df}{dx}^{backward} \approx \frac{f(x) - (x-dx)}{dx}
\end{equation}</p>
<p>可以从下图中清楚地看到三种情况的几何意义。</p>
<p><img src="https://vde05-1256575153.cos.ap-beijing.myqcloud.com/img/20220226143449.png" alt=""></p>
<p>当 $dx$ 足够小时，我们就可以认为使用函数点与周围点的差商能够近似代替该点的导数。下面使用 python 代码说明中心差商对导数的近似。</p>
<h3 id="python-计算数值一阶导数----中心差商">python 计算数值一阶导数 &ndash; 中心差商</h3>
<p>对于函数：
$$f(x) = sin(kx)$$
其中 $k$ 为波数：$k = 2\pi/\lambda$，可以很容易求得该函数的一阶导数作为中心差商的验证：
$$f^{\prime}(x) = kcos(kx)$$
函数在 $x$ 点处的中心差商表示为：</p>
<p>\begin{equation}
\label{eq:20}
f^{\prime}(x) \approx \frac{f(x+dx) - f(x-dx)}{2dx}
\end{equation}</p>
<pre><code class="language-python"># Import Libraries
import numpy as np
from math import *
import matplotlib.pyplot as plt

# Initial parameters
xmax = 10.0                     # physical domain (m)
nx = 200                        # number of samples    
dx = xmax/(nx-1)                # grid increment dx (m)
x  = np.linspace(0,xmax,nx)     # space coordinates

# Initialization of sin function
l = 40*dx     # wavelength
k = 2*pi/l    # wavenumber
f = np.sin(k*x)

# First derivative with two points

# Initiation of numerical and analytical derivatives 
nder=np.zeros(nx)          # numerical derivative
ader=np.zeros(nx)          # analytical derivative

# Numerical derivative of the given function
for i in range (1, nx-1):
    nder[i]=(f[i+1]-f[i-1])/(2*dx)

# Analytical derivative of the given function
ader= k * np.cos(k*x)   
# Exclude boundaries
ader[0]=0.
ader[nx-1]=0.

# Error (rms) 
rms = np.sqrt(np.mean((nder-ader)**2))

# Plotting 
# ----------------------------------------------------------------
plt.figure(figsize=(10,6))
plt.plot (x, nder,label=&quot;Numerical Derivative, 2 points&quot;, marker='+', color=&quot;blue&quot;)
plt.plot (x, ader, label=&quot;Analytical Derivative&quot;, lw=2, ls=&quot;-&quot;,color=&quot;black&quot;)
plt.plot (x, nder-ader, label=&quot;Difference&quot;, lw=2, ls=&quot;:&quot;)
plt.title(&quot;First derivative, Err (rms) = %.6f &quot; % (rms) )
plt.xlabel('x, m')
plt.ylabel('Amplitude')
plt.legend(loc='lower left')
plt.grid()
plt.show()
</code></pre>
<p><img src="https://vde05-1256575153.cos.ap-beijing.myqcloud.com/img/20220226145644.png" alt=""></p>
<h2 id="二阶导数的有限差分近似">二阶导数的有限差分近似</h2>
<p>使用与上一节中一阶导数相同的推导思路，若使用 $x-dx$, $x$, $x+dx$ 三点计算差商，则二阶导数的三点有限差分近似可以写为：</p>
<p>\begin{equation}
f^{\prime\prime}_{num}(x)=\dfrac{f(x+dx)-2 f(x)+f(x-dx)}{dx^2}
\end{equation}</p>
<p>以及如果使用 $x-2dx$, $x-dx$, $x$, $x+dx$, $x+2dx$ 五点计算差商，则二阶导数的五点有限差分近似可以写为：
\begin{equation}
f^{\prime\prime}(x)=\dfrac{-\dfrac{1}{12}f(x-2dx)+\dfrac{4}{3}f(x-dx)-\dfrac{5}{2}f(x) +\dfrac{4}{3}f(x+dx)-\dfrac{1}{12}f(x+2dx)}{dx^2}
\end{equation}</p>
<h3 id="python-计算数值二阶导数----三点及五点差商">python 计算数值二阶导数 &ndash; 三点及五点差商</h3>
<p>对于 Gaussian 函数：</p>
<p>\begin{equation}
f(x)=\dfrac{1}{\sqrt{2 \pi a}}e^{-\dfrac{(x-x_0)^2}{2a}}
\end{equation}</p>
<p>对该函数进行二阶求导，可以得到：</p>
<div>
\begin{equation} 
f^{\prime\prime}(x)= \dfrac{1}{\sqrt{2\pi a}} ( \dfrac{(x-x_0)^2}{a^2}- \dfrac{1}{a} ) \ e^{-\dfrac{(x-x_0)^2}{2a}}
\end{equation} 
</div>
<pre><code class="language-python"># Initialization 
xmax=10.0       # physical domain (m)
nx=100          # number of space samples
a=.25           # exponent of Gaussian function    
dx=xmax/(nx-1)  # Grid spacing dx (m)
x0 = xmax/2     # Center of Gaussian function x0 (m)

x=np.linspace(0,xmax,nx)   # defining space variable

# Initialization of Gaussian function           
f=(1./sqrt(2*pi*a))*np.exp(-(((x-x0)**2)/(2*a)))

# Second derivative with three-point operator

# Initiation of numerical and analytical derivatives 
nder3=np.zeros(nx)          # numerical derivative
ader=np.zeros(nx)          # analytical derivative

# Numerical second derivative of the given function 
for i in range (1, nx-1):
    nder3[i]=(f[i+1] - 2*f[i] + f[i-1])/(dx**2)

# Analytical second derivative of the Gaissian function
ader=1./sqrt(2*pi*a)*((x-x0)**2/a**2 -1/a)*np.exp(-1/(2*a)*(x-x0)**2)
# Exclude boundaries
ader[0]=0.
ader[nx-1]=0.

# Calculate rms error of numerical derivative
rms = np.sqrt(np.mean((nder3-ader)**2))

# Plotting 
plt.figure(figsize=(10,6))
plt.plot (x, nder3,label=&quot;Numerical Derivative, 3 points&quot;, lw=2, color=&quot;violet&quot;)
plt.plot (x, ader, label=&quot;Analytical Derivative&quot;, lw=2, ls=&quot;--&quot;)
plt.plot (x, nder3-ader, label=&quot;Difference&quot;, lw=2, ls=&quot;:&quot;)
plt.title(&quot;Second derivative, Err (rms) = %.6f &quot; % (rms) )
plt.xlabel('x, m')
plt.ylabel('Amplitude')
plt.legend(loc='lower left')
plt.grid()
plt.show()
</code></pre>
<p><img src="https://vde05-1256575153.cos.ap-beijing.myqcloud.com/img/20220226153327.png" alt=""></p>
<p>到这里我们就使用三点差商形式求得了 Gaussian 函数的数值二阶导数，与解析得到的二阶导数相比，误差 rms 为 0.008186. 保持其他参数不变，我们使用五点差商形式看看精度如何。</p>
<pre><code class="language-python"># Second derivative with five points Q: five points = fourth-order?

# Initialisation of derivative
nder5=np.zeros(nx) 

# Calculation of 2nd derivative  
for i in range (2, nx-2):
    nder5[i] = (-1./12 * f[i - 2] + 4./3  * f[i - 1] - 5./2 * f[i] \
                       +4./3  * f[i + 1] - 1./12  * f[i + 2]) / dx ** 2
    
# Exclude boundaries
ader[1]=0.
ader[nx-2]=0.
    
# Calculate rms error of numerical derivative
rms=rms*0
rms = np.sqrt(np.mean((nder5-ader)**2))
</code></pre>
<p><img src="https://vde05-1256575153.cos.ap-beijing.myqcloud.com/img/20220226153353.png" alt=""></p>
<p>可以发现五点差商形式的误差 rms 为 0.000218，比三点差商形式高出一个数量级。</p>

        ]]>
      </description>
    </item>
    
    <item>
      <title>从泰勒展开推导弹性波动方程的有限差分近似</title>
      <link>http://localhost:4321/blogs/fdm-waveequation-taylor/</link>
      <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:4321/blogs/fdm-waveequation-taylor/</guid>
      <description>
        <![CDATA[
        <p>以一维弹性波动方程为例：</p>
<p>\begin{equation}
\label{eq:1}
\frac{\partial^{2}u(x,t)}{\partial x^{2}} = \frac{1}{c^{2}} \frac{\partial^{2} u(x,t)}{\partial t^{2}} + f(x,t)
\end{equation}</p>
<p>式中，位移 $u(x,t)$ 是空间坐标 x 和时间 t 的单值连续函数，$c$ 为波速，$f(x,t)$ 为源项。</p>
<h2 id="从泰勒展开推导弹性波动方程的有限差分近似">从泰勒展开推导弹性波动方程的有限差分近似</h2>
<h3 id="空间差分算子的推导">空间差分算子的推导</h3>
<p>首先对位移函数 $u(x,t)$ 在坐标 $x$ 两侧附近作泰勒展开：</p>
<p>\begin{equation}
\label{eq:2}
u(x + \Delta x, t) = u(x, t) + \Delta x \frac{\partial u(x, t)}{\partial x} + \frac{1}{2} \Delta x^{2} \frac{\partial^{2} u(x,t)}{\partial x^{2}} + \frac{1}{6}\Delta x^{3}\frac{\partial^{3}u(x,t)}{\partial x^{3}} + \cdots
\end{equation}</p>
<p>\begin{equation}
\label{eq:3}
u(x - \Delta x, t) = u(x, t) - \Delta x \frac{\partial u(x, t)}{\partial x} + \frac{1}{2} \Delta x^{2} \frac{\partial^{2} u(x,t)}{\partial x^{2}} - \frac{1}{6}\Delta x^{3}\frac{\partial^{3}u(x,t)}{\partial x^{3}} + \cdots
\end{equation}</p>
<h4 id="位移对空间一阶偏导数的近似形式推导">位移对空间一阶偏导数的近似形式推导</h4>
<p>用 式 \ref{eq:2} 减去 式 \ref{eq:3}：</p>
<p>\begin{equation}
\label{eq:4}
\nonumber
u(x+\Delta x, t) - u(x-\Delta x, t) = 2 \Delta \frac{\partial u(x, t)}{\partial x} + \frac{1}{3}\Delta x^{3} \frac{\partial^{3}u(x,t)}{\partial x^{3}} + O(\Delta x^{4})
\end{equation}</p>
<p>将 $\frac{\partial u(x, t)}{\partial x}$ 移到左边，就可以得到：</p>
<p>\begin{equation}
\label{eq:5}
\nonumber
\frac{\partial u(x, t)}{\partial x} = \frac{u(x+\Delta x, t) - u(x-\Delta x, t)}{2\Delta x} - \frac{1}{6}\Delta x^{2} \frac{\partial^{3} u(x,t)}{\partial x^{3}} - O(\Delta x^{3})
\end{equation}</p>
<p>考虑到 $\Delta x \rightarrow 0$ 是一个小量，因此得到：</p>
<p>\begin{equation}
\label{eq:6}
\nonumber
\frac{\partial u(x, t)}{\partial x} = \frac{u(x+\Delta x, t) - u(x-\Delta x, t)}{2\Delta x} + O(\Delta x^{2})  = D_{x}u + O(\Delta x^{2})
\end{equation}</p>
<p>式中，$D_{x}$ 称为 <code>差分算子</code> ，$O(\Delta x^{2})$ 称为差分算子的 <code>截断误差</code> 。</p>
<p>与公式中的其他项相比，小量 $\Delta x$ 的二阶及更高阶指数项可以忽略时，得到 <code>位移对空间一阶偏导数的近似形式</code> ：</p>
<p>\begin{equation}
\label{eq:7}
\frac{\partial u(x, t)}{\partial x} \approx D_{x}u = \frac{u(x+\Delta x, t) - u(x-\Delta x, t)}{2\Delta x}
\end{equation}</p>
<h4 id="位移对空间二阶偏导数的近似形式推导">位移对空间二阶偏导数的近似形式推导</h4>
<p>用 式 \ref{eq:2} 加上 式 \ref{eq:3}，得到：</p>
<p>\begin{equation}
\label{eq:8}
\nonumber
u(x+\Delta x, t) + u(x-\Delta x, t) = 2 u(x, t) + \Delta x^{2} \frac{\partial^{2} u(x, t)}{\partial x^{2}} + O(\Delta x^{4})
\end{equation}</p>
<p>将 $\frac{\partial^{2} u(x, t)}{\partial x^{2}}$ 移到左边，整理为：</p>
<p>\begin{equation}
\label{eq:9}
\nonumber
\frac{\partial^{2} u(x, t)}{\partial x^{2}}  = \frac{u(x+\Delta x, t) + u(x - \Delta x, t) - 2u(x,t)}{\Delta x^{2}} + O(\Delta x^{2}) = D_{xx}u + O(\Delta x^{2})
\end{equation}</p>
<p>式中，$D_{xx}$ 为 <code>二阶差分算子</code> ，$O(\Delta x^{2})$ 称为差分算子的 <code>截断误差</code> 。</p>
<p>与公式中的其他项相比，小量 $\Delta x$ 的二阶及更高阶指数项可以忽略时，得到 <code>位移对空间二阶偏导数的近似形式</code> ：</p>
<p>\begin{equation}
\label{eq:10}
\frac{\partial^{2} u(x, t)}{\partial x^{2}}  \approx D_{xx}u = \frac{u(x+\Delta x, t) + u(x - \Delta x, t) - 2u(x,t)}{\Delta x^{2}}
\end{equation}</p>
<p>因此，位移函数在坐标 x 处的一阶和二阶偏导数，都可以近似表示为 x 附近函数值的差商形式，截断误差均为 $O(\Delta x^{2})$ 。</p>
<h3 id="时间差分算子的推导">时间差分算子的推导</h3>
<p>首先对位移函数 $u(x,t)$ 在坐标 $t$ 两侧附近作泰勒展开：</p>
<p>\begin{equation}
\label{eq:11}
u(x, t + \Delta t) = u(x, t) + \Delta t \frac{\partial u(x, t)}{\partial t} + \frac{1}{2} \Delta t^{2} \frac{\partial^{2} u(x,t)}{\partial t^{2}} + \frac{1}{6}\Delta t^{3}\frac{\partial^{3}u(x,t)}{\partial t^{3}} + \cdots
\end{equation}</p>
<p>\begin{equation}
\label{eq:12}
u(x, t - \Delta t) = u(x, t) - \Delta t \frac{\partial u(x, t)}{\partial t} + \frac{1}{2} \Delta t^{2} \frac{\partial^{2} u(x,t)}{\partial t^{2}} -\frac{1}{6}\Delta t^{3}\frac{\partial^{3}u(x,t)}{\partial t^{3}} + \cdots
\end{equation}</p>
<p>与上述空间差分算子的推导过程类似，位移函数对时间的偏导数用差分算子 <code>$D_{t}$</code>, <code>$D_{tt}$</code> 表示为：</p>
<p>\begin{equation}
\label{eq:13}
\frac{\partial u(x, t)}{\partial t} \approx D_{t}u = \frac{u(x, t+\Delta t) - u(x, t+\Delta t)}{2\Delta t}
\end{equation}</p>
<p>\begin{equation}
\label{eq:14}
\frac{\partial^{2} u(x, t)}{\partial t^{2}}  \approx D_{tt}u = \frac{u(x, t+\Delta t) + u(x, t+\Delta t) - 2u(x,t)}{\Delta t^{2}}
\end{equation}</p>
<p>截断误差为 $O(\Delta t^{2})$ 。</p>
<h2 id="一维波动方程的有限差分近似">一维波动方程的有限差分近似</h2>
<p>使用公式 \ref{eq:7}, \ref{eq:10}, \ref{eq:13}, \ref{eq:14} 中的差分算子代替波动方程 \ref{eq:1} 中的微分算子，可以将波动方程近似为：</p>
<p>\begin{equation}
\label{eq:15}
\frac{u(x+\Delta x, t) + u(x - \Delta x, t) - 2 u(x, t)}{\Delta x^{2}} = \frac{1}{c^{2}} \frac{u(x, t+\Delta t) + u(x, t - \Delta t) - 2u(x, t)}{\Delta t^{2}} + f(x,t)
\end{equation}</p>
<p>接下来我们对连续的波动方程求解域离散化，对求解域进行均匀网格划分，空间和时间步长分别为 <code>$\Delta x$</code>, <code>$\Delta t$</code>, 如下图所示：</p>
<p><img src="https://vde05-1256575153.cos.ap-beijing.myqcloud.com/img/FDM_Space_time_discrete.jpeg" alt=""></p>
<p>经过离散化的空间坐标和时间坐标可以表示为：</p>
<p>\begin{equation}
\label{eq:17}
\nonumber
x = x_{j} = j \Delta x, \quad j=0, \pm1, \pm2, \cdots
\end{equation}</p>
<p>\begin{equation}
\label{eq:18}
\nonumber
t = t_{n} = n \Delta t, \quad n=0, \pm1, \pm2, \cdots
\end{equation}</p>
<p>对求解域离散化后，可以将离散化的波动方程表示为如下式所示的形式：</p>
<div>
\begin{equation}
\label{eq:16}
\frac{u_{j+1}^{n}+u_{j-1}^{n}-2u_{j}^{n}}{\Delta x^{2}} = \frac{1}{c^{2}} \frac{u_{j}^{n+1}+u_{j}^{n-1}-2u_{j}^{n}}{\Delta t^{2}} + f_j^n, \quad j=0,\pm1, \pm2, \cdots;n=0,1,2,\cdots
\end{equation}
</div>
<p>将上式整理，得到 <code>$u_{j}^{n+1}$</code> 的外推格式：</p>
<div>
\begin{equation}
\label{eq:20}
u_{j}^{n+1} = c_{j}^2 \frac{dt^2}{dx^2} [u_{j+1}^{n} - 2u_j^n + u_{j-1}^n] + 2u_j^n - u_j^{n-1} + dt^2 f_j^n
\end{equation}
</div>
<p>当第 $n-1$ 层的值 <code>$u_j^{n-1}$</code> 和第 $n$ 层的值 <code>$u_{j-1}{n}$</code>, <code>$u_{j}{n}$</code>, <code>$u_{j+1}{n}$</code> 的值已知时，可以直接计算得到第 $n+1$ 层的值 <code>$u_j^{n+1}$</code>。因此这种差分格式为三层显式差分格式。</p>
<p>在计算的过程中，先对计算同一时刻的空间离散网格上的 $u$，也就是先求每一层的值，上一层算完了再算下一层。下面这个图片可能对理解计算的过程有帮助。</p>
<p><img src="https://vde05-1256575153.cos.ap-beijing.myqcloud.com/img/IMG_0529.jpeg" alt=""></p>

        ]]>
      </description>
    </item>
    
  </channel>
</rss>
